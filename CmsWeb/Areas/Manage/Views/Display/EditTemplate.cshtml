@using CmsData
@using CmsWeb.Models
@model CmsData.Content
@{
    ViewBag.Title = "Edit Template";
    ViewBag.PageHeader = "Edit Template";
    Layout = ViewExtensions2.TouchPointLayout();
    var rolelist = ContentModel.fetchRoles(ViewExtensions2.CurrentDatabase);
}
@using (Html.BeginForm("ContentUpdate", "Display", FormMethod.Post))
{
    <div class="row" id="Edit-VueApp">
        <div class="col-md-9">
            <div class="box box-responsive">
                <div class="box-content">
                    <div class="row">
                        <div class="col-sm-4">
                            <div class="@((Model.Name == "Empty Template") ? "hidden" : "form-group")">
                                <label for="name" class="control-label">Template Name</label>
                                @{
                                    IDictionary<string, object> attr = new Dictionary<string, object>() { { "class", "form-control" }, { @"v-model", @"editName" } };
                                }
                                @Html.TextBox("name", Model.Name, attr)
                                <small v-if="notValidName" class="red-empty">"Empty Template" name cannot be used</small>
                            </div>
                            <div class="form-group">
                                <label for="title" class="control-label">Title</label>
                                @Html.TextBox("title", Model.Title, new { @class = "form-control" })
                            </div>
                            <div class="@((Model.Name == "Empty Template") ? "hidden" : "form-group")">
                                <label for="role" class="control-label">Role</label>
                                @Html.DropDownList("roleid", new SelectList(rolelist, "RoleId", "RoleName"), new { @class = "form-control" })
                            </div>
                        </div>
                        <div class="col-sm-4 pull-right" style="margin-bottom: 5px;">
                            <a href="https://docs.touchpointsoftware.com/EmailTexting/EmailReplacements.html" target="_blank" class="btn btn-default btn-sm"><i class="fa fa-question-circle"></i> Email Replacement Codes</a>
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.TextArea("body", new { @class = "form-control", rows = "26" })
                    </div>
                    <small v-if="isEmptyTemplate" class="red-empty">"Empty Template" cannot be deleted or renamed</small><br /><br />
                    <a href="/Display/#tab_emailTemplates" class="btn btn-default">Back to List</a>
                    <a href="#" v-bind:class="'btn btn-danger delete ' + (isEmptyTemplate ? 'disabled' : '')"><i class="fa fa-trash"></i> Delete</a>
                    <input type="submit" v-bind:class="'btn btn-primary ' + (notValidName ? 'disabled' : '')" value="Save Template" />
                </div>
            </div>
        </div>
    </div>
    @Html.Hidden("id");
}
@section scripts
{
    @ViewExtensions2.CkEditor()
    <script type="text/javascript">

    function getParameterByName(name) {
      name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
      var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
          results = regex.exec(location.search);
      return results == null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
    }

    $(function () {

      $("a.delete").click(function (ev) {
        ev.preventDefault();
        var href = this.href;

        swal({
          title: "Are you sure?",
          type: "warning",
          showCancelButton: true,
          confirmButtonClass: "btn-danger",
          confirmButtonText: "Yes, delete it!",
          closeOnConfirm: false
        },
        function () {
          $.post("/Display/ContentDelete", { id: "@Model.Id" }, function (ret) {
            if (ret && ret.error)
              swal("Error!", ret.error, "error");
            else {
              swal({
                title: "Deleted!",
                type: "success"
              },
              function () {
                window.location = "/Manage/Display/#tab_htmlContent";
              });
            }
          });
        });
      });

      CKEDITOR.env.isCompatible = true;

      CKEDITOR.replace('body', {
        height: 400,
        allowedContent: true,
        autoParagraph: false,
        fullPage: !$("#snippet").prop("checked"),
        customConfig: "/Content/touchpoint/js/ckeditorconfig.js"
      });

      $("#snippet").change(function () {
        var checked = this.checked;
        swal({
          title: "Reload page?",
          type: "warning",
          showCancelButton: true,
          confirmButtonClass: "btn-warning",
          confirmButtonText: "Yes!",
          closeOnConfirm: false
        },
        function () {
          if (checked)
            window.location.href = window.location.pathname + '?snippet=true';
          else
            window.location.href = window.location.pathname;
        });

      });
    });
    </script>

    <script type="text/javascript">
        const EditlApp = new Vue({
            el: '#Edit-VueApp',
            data: {
                editName: '',
                notValidName: false,
                isEmptyTemplate: false,
                firstLoad: true
            },
            mounted: function () {
                this.editName = '@Model.Name';
                this.isEmptyTemplate = this.editName.toLowerCase().split(' ').join('') === 'emptytemplate';
            },
            watch: {
                editName: function (val) {
                    this.notValidName = val.toLowerCase().split(' ').join('') === 'emptytemplate';
                    if (this.firstLoad && this.isEmptyTemplate) {
                        this.notValidName = false;
                        this.firstLoad = false;
                    }
                }
            }
        });
    </script>
}
